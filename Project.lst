Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/29/18 16:14:47
Projekat.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 = 00140000			BUFFER_SIZE = 256*256*20

 00000000			.data
 00000000  00140000 [		bufferIn BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 00140000  0000000A [		bufferOut BYTE 10 DUP(?)
	    00
	   ]
 0014000A  00000004 [		bufferNumber BYTE 4 DUP(?)
	    00
	   ]
 0014000E  00000004 [		bufferNum3 BYTE 4 DUP(?)
	    00
	   ]
 00140012  00000003 [		bufferNum2 BYTE 3 DUP(?)
	    00
	   ]
 00140015  00000002 [		bufferNum1 BYTE 2 DUP(?)
	    00
	   ]
 00140017  00000050 [		fileName1 BYTE 80 DUP(0)
	    00
	   ]
 00140067  00000050 [		fileName2 BYTE 80 DUP(0)
	    00
	   ]
 001400B7 00000000		fileHandle1 HANDLE ?
 001400BB 00000000		fileHandle2 HANDLE ?
 001400BF 00000000		factorS DWORD 0
 001400C3 00000000		buffPtr DWORD 0
 001400C7 00000000		buffPtr2 DWORD 0
 001400CB 00000000		buffPtr3 DWORD 0
 001400CF 00000000		buffHelp DWORD 0
 001400D3 00000000		state DWORD 0		; state = 0 na pocetku, state = 1 za citane sirine i visine, state = 2 za citanje max vrednosti piksela,
									; state = 3 za upis nove sirine, visine i max vrednosti piksela, state = 4 za glavnu obradu
 001400D7 00000000		typeS DWORD 0		; typeS = 0 za povecanje, typeS = ostalo za decimaciju
 001400DB 00000000		pixWidth DWORD 0
 001400DF 00000000		newPixWidth DWORD 0
 001400E3 00000000		pixHeight DWORD 0
 001400E7 00000000		newPixHeight DWORD 0
 001400EB 00000000		pixMaxValue DWORD 0
 001400EF 0000			string WORD 0
 001400F1 0000			counterWidth WORD 0
 001400F3 0000			counterHeight WORD 0
 001400F5 0000			counterSW WORD 0
 001400F7 0000			counterSH WORD 0
 001400F9 00000000		bytesRead DWORD 0
 001400FD 00000000		I1 DWORD 0
 00140101 00000000		I2 DWORD 0
 00140105 00000000		I3 DWORD 0
 00140109 00000000		I4 DWORD 0
 0014010D 00000000		F1 DWORD 0
 00140111 00000000		F2 DWORD 0
 00140115 00000000		pom1 DWORD 0
 00140119 00000000		Gxy DWORD 0
 0014011D 00000000		counterX0 DWORD 0
 00140121 00000000		counterY0 DWORD 0
 00140125 00000000		counterXr DWORD 0
 00140129 00000000		counterYr DWORD 0
 0014012D 00			flag1 BYTE 0
 0014012E 00			flag2 BYTE 0

 00000000			.code

				; ************************************************************
				; funkcija koja cita potrebne podatke sa standardnog ulaza,
				; a to su: naziv ulaznog i izlaznog fajla, faktor skaliranja
				; i da li je u pitanju decimacija ili povecanje.
				; ************************************************************
 00000000			readSTD PROC
					; ucitavanje podataka o ulaznom i izlaznom fajlu
					mWrite <"Unesite naziv ulaznog fajla:", 0dh, 0ah>
 0014012F		     1		.data		
 0014012F 55 6E 65 73 69     1		??0000 BYTE "Unesite naziv ulaznog fajla:", 0dh, 0ah,0	
	   74 65 20 6E 61
	   7A 69 76 20 75
	   6C 61 7A 6E 6F
	   67 20 66 61 6A
	   6C 61 3A 0D 0A
	   00
 00000000		     1		.code
 00000000  52		     1		push	edx
 00000001  BA 0014012F R     1		mov	edx,OFFSET ??0000
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop	edx
 0000000C  BA 00140017 R		mov edx, OFFSET fileName1
 00000011  B9 00000050			mov ecx, SIZEOF fileName1
 00000016  E8 00000000 E		call ReadString
					mWrite <"Unesite naziv izlaznog fajla", 0dh, 0ah>
 0014014E		     1		.data		
 0014014E 55 6E 65 73 69     1		??0001 BYTE "Unesite naziv izlaznog fajla", 0dh, 0ah,0	
	   74 65 20 6E 61
	   7A 69 76 20 69
	   7A 6C 61 7A 6E
	   6F 67 20 66 61
	   6A 6C 61 0D 0A
	   00
 0000001B		     1		.code
 0000001B  52		     1		push	edx
 0000001C  BA 0014014E R     1		mov	edx,OFFSET ??0001
 00000021  E8 00000000 E     1		call	WriteString
 00000026  5A		     1		pop	edx
 00000027  BA 00140067 R		mov edx, OFFSET fileName2
 0000002C  B9 00000050			mov ecx, SIZEOF fileName2
 00000031  E8 00000000 E		call ReadString
					; otvaranje ulaznog fajla preko OpenInputFile procedure
 00000036  BA 00140017 R		mov edx, OFFSET fileName1
 0000003B  E8 00000000 E		call OpenInputFile
 00000040  A3 001400B7 R		mov fileHandle1, eax
 00000045  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 00000048  75 0E			jne input_ok
					mWrite <"Ne postoji ulazni fajl", 0dh, 0ah>
 0014016D		     1		.data		
 0014016D 4E 65 20 70 6F     1		??0002 BYTE "Ne postoji ulazni fajl", 0dh, 0ah,0	
	   73 74 6F 6A 69
	   20 75 6C 61 7A
	   6E 69 20 66 61
	   6A 6C 0D 0A 00
 0000004A		     1		.code
 0000004A  52		     1		push	edx
 0000004B  BA 0014016D R     1		mov	edx,OFFSET ??0002
 00000050  E8 00000000 E     1		call	WriteString
 00000055  5A		     1		pop	edx
 00000056  EB 6F			jmp jmp_to_exit1
 00000058			input_ok:
					; stvaranje izlaznog fajla CreateOutputFile procedurom
 00000058  BA 00140067 R		mov edx, OFFSET fileName2
 0000005D  E8 00000000 E		call CreateOutputFile
 00000062  A3 001400BB R		mov fileHandle2, eax
 00000067  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 0000006A  75 0E			jne output_ok
					mWrite <"Izlazni fajl se nije napravio", 0dh, 0ah>
 00140186		     1		.data		
 00140186 49 7A 6C 61 7A     1		??0003 BYTE "Izlazni fajl se nije napravio", 0dh, 0ah,0	
	   6E 69 20 66 61
	   6A 6C 20 73 65
	   20 6E 69 6A 65
	   20 6E 61 70 72
	   61 76 69 6F 0D
	   0A 00
 0000006C		     1		.code
 0000006C  52		     1		push	edx
 0000006D  BA 00140186 R     1		mov	edx,OFFSET ??0003
 00000072  E8 00000000 E     1		call	WriteString
 00000077  5A		     1		pop	edx
 00000078  EB 4D			jmp jmp_to_exit1
 0000007A			output_ok:
					; ucitavanje faktora s
					mWrite <"Unesite faktor skaliranja s:", 0dh, 0ah>
 001401A6		     1		.data		
 001401A6 55 6E 65 73 69     1		??0004 BYTE "Unesite faktor skaliranja s:", 0dh, 0ah,0	
	   74 65 20 66 61
	   6B 74 6F 72 20
	   73 6B 61 6C 69
	   72 61 6E 6A 61
	   20 73 3A 0D 0A
	   00
 0000007A		     1		.code
 0000007A  52		     1		push	edx
 0000007B  BA 001401A6 R     1		mov	edx,OFFSET ??0004
 00000080  E8 00000000 E     1		call	WriteString
 00000085  5A		     1		pop	edx
 00000086			read_factor1:
 00000086  E8 00000000 E		call ReadInt
 0000008B  71 0E			jno good_factor1
					mWrite <"Pogresan unos. Unesite ponovo: ", 0dh, 0ah>
 001401C5		     1		.data		
 001401C5 50 6F 67 72 65     1		??0005 BYTE "Pogresan unos. Unesite ponovo: ", 0dh, 0ah,0	
	   73 61 6E 20 75
	   6E 6F 73 2E 20
	   55 6E 65 73 69
	   74 65 20 70 6F
	   6E 6F 76 6F 3A
	   20 0D 0A 00
 0000008D		     1		.code
 0000008D  52		     1		push	edx
 0000008E  BA 001401C5 R     1		mov	edx,OFFSET ??0005
 00000093  E8 00000000 E     1		call	WriteString
 00000098  5A		     1		pop	edx
 00000099  EB EB			jmp read_factor1
 0000009B			good_factor1:
 0000009B  A3 001400BF R		mov factorS, eax
					; provera da li je u pitanju povecanje ili decimacija
					mWrite <"Ako je u pitanju povecanje unesite 0, a ako je u pitanju decimacija unesite neki broj razlicit od 0", 0dh, 0ah>
 001401E7		     1		.data		
 001401E7 41 6B 6F 20 6A     1		??0006 BYTE "Ako je u pitanju povecanje unesite 0, a ako je u pitanju decimacija unesite neki broj razlicit od 0", 0dh, 0ah,0	
	   65 20 75 20 70
	   69 74 61 6E 6A
	   75 20 70 6F 76
	   65 63 61 6E 6A
	   65 20 75 6E 65
	   73 69 74 65 20
	   30 2C 20 61 20
	   61 6B 6F 20 6A
	   65 20 75 20 70
	   69 74 61 6E 6A
	   75 20 64 65 63
	   69 6D 61 63 69
	   6A 61 20 75 6E
	   65 73 69 74 65
	   20 6E 65 6B 69
	   20 62 72 6F 6A
	   20 72 61 7A 6C
	   69 63 69 74 20
	   6F 64 20 30 0D
	   0A 00
 000000A0		     1		.code
 000000A0  52		     1		push	edx
 000000A1  BA 001401E7 R     1		mov	edx,OFFSET ??0006
 000000A6  E8 00000000 E     1		call	WriteString
 000000AB  5A		     1		pop	edx
 000000AC			read_factor2:
 000000AC  E8 00000000 E		call ReadInt
 000000B1  71 0E			jno good_factor2
					mWrite <"Pogresan unos. Unesite ponovo: ", 0dh, 0ah>
 0014024D		     1		.data		
 0014024D 50 6F 67 72 65     1		??0007 BYTE "Pogresan unos. Unesite ponovo: ", 0dh, 0ah,0	
	   73 61 6E 20 75
	   6E 6F 73 2E 20
	   55 6E 65 73 69
	   74 65 20 70 6F
	   6E 6F 76 6F 3A
	   20 0D 0A 00
 000000B3		     1		.code
 000000B3  52		     1		push	edx
 000000B4  BA 0014024D R     1		mov	edx,OFFSET ??0007
 000000B9  E8 00000000 E     1		call	WriteString
 000000BE  5A		     1		pop	edx
 000000BF  EB EB			jmp read_factor2
 000000C1			good_factor2:
 000000C1  A3 001400D7 R		mov typeS, eax
 000000C6  C3				ret
 000000C7			jmp_to_exit1:
					exit
 000000C7  6A 00	   *	    push   +000000000h
 000000C9  E8 00000000 E   *	    call   ExitProcess
 000000CE			readSTD ENDP

				; ************************************************************
				; funkcija koja u slucaju povecanja izracunava intenzitet novog
				; piksela na osnovu sledecih promenljivih: I1, I2, I3, I4,
				; counterXr, counterYr i factorS
				; izracunati intenzitet se smesta u Gxy
				; ************************************************************
 000000CE			calculateG PROC
 000000CE  50				push eax
 000000CF  51				push ecx
 000000D0  52				push edx
					; pom1 = f(x0, y0) * (s - yr)
 000000D1  A1 001400BF R		mov eax, factorS
 000000D6  2B 05 00140129 R		sub eax, counterYr
 000000DC  F7 25 001400FD R		mul I1
 000000E2  A3 00140115 R		mov pom1, eax
					; pom1 = pom1 + f(x0, y0 + 1) * yr
 000000E7  A1 00140129 R		mov eax, counterYr
 000000EC  F7 25 00140101 R		mul I2
 000000F2  01 05 00140115 R		add pom1, eax
					; F1 = pom1 / s
 000000F8  BA 00000000			mov edx, 0
 000000FD  A1 00140115 R		mov eax, pom1
 00000102  F7 35 001400BF R		div factorS
 00000108  A3 0014010D R		mov F1, eax
					; pom1 = f(x0 + 1, y0) * (s - yr)
 0000010D  A1 001400BF R		mov eax, factorS
 00000112  2B 05 00140129 R		sub eax, counterYr
 00000118  F7 25 00140105 R		mul I3
 0000011E  A3 00140115 R		mov pom1, eax
					; pom1 = pom1 + f(x0 + 1, y0 + 1) * yr
 00000123  A1 00140129 R		mov eax, counterYr
 00000128  F7 25 00140109 R		mul I4
 0000012E  01 05 00140115 R		add pom1, eax
					; F2 = pom1 / s
 00000134  BA 00000000			mov edx, 0
 00000139  A1 00140115 R		mov eax, pom1
 0000013E  F7 35 001400BF R		div factorS
 00000144  A3 00140111 R		mov F2, eax
					; pom1 = F1 * (s - xr)
 00000149  A1 001400BF R		mov eax, factorS
 0000014E  2B 05 00140125 R		sub eax, counterXr
 00000154  F7 25 0014010D R		mul F1
 0000015A  A3 00140115 R		mov pom1, eax
					; pom1 = pom1 + F2 * xr
 0000015F  A1 00140125 R		mov eax, counterXr
 00000164  F7 25 00140111 R		mul F2
 0000016A  01 05 00140115 R		add pom1, eax
					; Gxy = pom1 / s
 00000170  BA 00000000			mov edx, 0
 00000175  A1 00140115 R		mov eax, pom1
 0000017A  F7 35 001400BF R		div factorS
 00000180  A3 00140119 R		mov Gxy, eax
 00000185  5A				pop edx
 00000186  59				pop ecx
 00000187  58				pop eax
 00000188  C3				ret
 00000189			calculateG ENDP

				; ************************************************************
				; funkcija vraca pokazivac (buffPtr2) na intenzitet piksela koji se nalazi
				; ispod piksela na koji trenutno pokazuje buffPtr
				; ************************************************************
 00000189			getI PROC
 00000189  50				push eax
 0000018A  51				push ecx
 0000018B  52				push edx
					; ecx je sirina slike, petlja se vrti dok ecx ne postane 0
					; buffPtr2 je pokazivac koji ce pokazivati na piksel ispod
					; piksela na koji pokazuje buffPtr
 0000018C  8B 0D 001400DB R		mov ecx, pixWidth
 00000192  A1 001400C3 R		mov eax, buffPtr
 00000197  A3 001400C7 R		mov buffPtr2, eax
					; petlja za prolazak kroz fajl i pronalazak zeljenog piksela
 0000019C			getI_loop:
 0000019C  83 F9 00			cmp ecx, 0
 0000019F  74 39			je getI_end
 000001A1  BB 00000000			mov ebx, 0
 000001A6			getI_loop1:
 000001A6  8B 15 001400C7 R		mov edx, buffPtr2
 000001AC  8A 02			mov al, [edx]
 000001AE  E8 00000000 E		call IsDigit
 000001B3  75 08			jnz getI_end1
 000001B5  FF 05 001400C7 R		inc buffPtr2
 000001BB  EB E9			jmp getI_loop1
 000001BD			getI_end1:
					; sada je procitan intenzitet piksela, i sada preskacemo razmak i
					; eventualno nov red
 000001BD  FF 05 001400C7 R		inc buffPtr2
 000001C3  8B 15 001400C7 R		mov edx, buffPtr2
 000001C9  8A 02			mov al, [edx]
 000001CB  3C 0A			cmp al, 0ah
 000001CD  74 03			je getI_skip
 000001CF			getI_skip_end:
 000001CF  49				dec ecx
 000001D0  EB CA			jmp getI_loop
 000001D2			getI_skip:
 000001D2  FF 05 001400C7 R		inc buffPtr2
 000001D8  EB F5			jmp getI_skip_end
 000001DA			getI_end:
 000001DA  5A				pop edx
 000001DB  59				pop ecx
 000001DC  58				pop eax
 000001DD  C3				ret
 000001DE			getI ENDP

				; ************************************************************
				; funkcija koja konvertuje integer u string i ispisuje na izlaz
				; vrednost koja se nalazi u eax registru; koriste se
				; registri ebx, ecx i edx koji se zbog toga stavljaju na stek.
				; ************************************************************
 000001DE			printNumber PROC
 000001DE  53				push ebx
 000001DF  51				push ecx
 000001E0  52				push edx
 000001E1  BB 0000000A			mov ebx, 10
 000001E6  B9 00000003			mov ecx, 3
 000001EB			int_to_string:
 000001EB  BA 00000000			mov edx, 0
 000001F0  F7 F3			div ebx
 000001F2  80 C2 30			add dl, 30h
 000001F5  88 91 0014000A R		mov bufferNumber[ecx], dl
 000001FB  49				dec ecx
 000001FC  83 F8 00			cmp eax, 0
 000001FF  75 EA			jnz int_to_string
 00000201  A1 001400BB R		mov eax, fileHandle2
 00000206  BB 00000003			mov ebx, 3
 0000020B  2B D9			sub ebx, ecx
 0000020D  8B CB			mov ecx, ebx
 0000020F  BB 00000004			mov ebx, 4
 00000214  2B D9			sub ebx, ecx
 00000216  BA 0014000A R		mov edx, OFFSET bufferNumber
 0000021B  03 D3			add edx, ebx
 0000021D  E8 00000000 E		call WriteToFile
 00000222  5A				pop edx
 00000223  59				pop ecx
 00000224  5B				pop ebx
 00000225  C3				ret
 00000226			printNumber ENDP

				; ************************************************************
				; funkcija koja ispisuje prazan string u izlaznu datoteku
				; ************************************************************
 00000226			printSpaceString PROC
 00000226  66| C7 05			mov string, ' '
	   001400EF R
	   0020
 0000022F  A1 001400BB R		mov eax, fileHandle2
 00000234  BA 001400EF R		mov edx, OFFSET string
 00000239  B9 00000001			mov ecx, 1
 0000023E  E8 00000000 E		call WriteToFile	
 00000243  C3				ret
 00000244			printSpaceString ENDP

				; ************************************************************
				; funkcija koja ispisuje karakter za nov red u izlazni fajl
				; ************************************************************
 00000244			printNewLine PROC
 00000244  66| C7 05			mov string, 0ah
	   001400EF R
	   000A
 0000024D  A1 001400BB R		mov eax, fileHandle2
 00000252  BA 001400EF R		mov edx, OFFSET string
 00000257  B9 00000001			mov ecx, 1
 0000025C  E8 00000000 E		call WriteToFile	
 00000261  C3				ret
 00000262			printNewLine ENDP

				; ************************************************************
				; funkcija koja cita jedan broj iz ulaznog fajla i smesta
				; vrednost u edx registar, a duzinu stringa u ecx registar
				; argument funkcije je pokazivac na broj koji treba da se procita
				; a smesten je u ebx registar
				; ************************************************************
 00000262			readNumber PROC
 00000262  50				push eax
 00000263  B9 00000000			mov ecx, 0
 00000268			read_number_loop:
 00000268  8B D3			mov edx, ebx
 0000026A  8A 02			mov al, [edx]
 0000026C  E8 00000000 E		call IsDigit
 00000271  75 0A			jnz end_read_number_loop
 00000273  88 81 0014000E R		mov bufferNum3[ecx], al
 00000279  41				inc ecx
 0000027A  43				inc ebx
 0000027B  EB EB			jmp read_number_loop
 0000027D			end_read_number_loop:
					; proverava se da li je broj dvocifren
 0000027D  83 F9 02			cmp ecx, 2
 00000280  74 13			je smaller100
 00000282  83 F9 01			cmp ecx, 1
 00000285  74 29			je smaller10
 00000287  BA 0014000E R		mov edx, OFFSET bufferNum3
 0000028C			end_smaller:
					; smanjuje se brojac, preskace se razmak, proverava se da li je sledeci karakter za novi red,
					; i ako jeste preskace se i on
 0000028C  43				inc ebx
 0000028D  8A 03			mov al, [ebx]
 0000028F  3C 0A			cmp al, 0ah
 00000291  74 2E			je skip_new_line
 00000293  EB 2D			jmp end_read_number
 00000295			smaller100:
 00000295  A0 0014000E R		mov al, bufferNum3[0]
 0000029A  A2 00140012 R		mov bufferNum2[0], al
 0000029F  A0 0014000F R		mov al, bufferNum3[1]
 000002A4  A2 00140013 R		mov bufferNum2[1], al
 000002A9  BA 00140012 R		mov edx, OFFSET bufferNum2
 000002AE  EB DC			jmp end_smaller
 000002B0			smaller10:
 000002B0  A0 0014000E R		mov al, bufferNum3[0]
 000002B5  A2 00140015 R		mov bufferNum1[0], al
 000002BA  BA 00140015 R		mov edx, OFFSET bufferNum1
 000002BF  EB CB			jmp end_smaller
 000002C1			skip_new_line:
 000002C1  43				inc ebx
 000002C2			end_read_number:
 000002C2  58				pop eax
 000002C3  C3				ret
 000002C4			readNumber ENDP

				; ************************************************************
				; main funkcija
				; ************************************************************
 000002C4			main PROC
					; poziva se funkcija koja cita potrebne podatke sa standardnog ulaza
 000002C4  E8 FFFFFD37			call readSTD

					; citanje ulaznog fajla
 000002C9  A1 001400B7 R		mov eax, fileHandle1
 000002CE  BA 00000000 R		mov edx, OFFSET bufferIn
 000002D3  B9 00140000			mov ecx, BUFFER_SIZE
 000002D8  E8 00000000 E		call readFromFile
 000002DD  73 11			jnc read_ok
					mWrite <"Greska pri citanju fajla", 0dh, 0ah>
 0014026F		     1		.data		
 0014026F 47 72 65 73 6B     1		??0008 BYTE "Greska pri citanju fajla", 0dh, 0ah,0	
	   61 20 70 72 69
	   20 63 69 74 61
	   6E 6A 75 20 66
	   61 6A 6C 61 0D
	   0A 00
 000002DF		     1		.code
 000002DF  52		     1		push	edx
 000002E0  BA 0014026F R     1		mov	edx,OFFSET ??0008
 000002E5  E8 00000000 E     1		call	WriteString
 000002EA  5A		     1		pop	edx
 000002EB  E9 000004B4			jmp close_files
 000002F0			read_ok:
					
					; prepisivanje karaktera 'P2'
 000002F0  B9 00000003			mov ecx, 3
 000002F5  BE 00000000 R		mov esi, OFFSET bufferIn
 000002FA  BF 00140000 R		mov edi, OFFSET bufferOut
 000002FF  F3/ A4			rep movsb
 00000301  A1 001400BB R		mov eax, fileHandle2
 00000306  BA 00140000 R		mov edx, OFFSET bufferOut
 0000030B  B9 00000003			mov ecx, 3
 00000310  E8 00000000 E		call WriteToFile
 00000315  89 35 001400C3 R		mov buffPtr, esi
 0000031B  C7 05 001400D3 R		mov state, 1
	   00000001
 00000325  0F 82 0000046D		jc error

					; loop koji proverava koji deo teksta se cita i/ili upisuje u fajl
 0000032B			check_state:
					; provera da li je sledeci karakter '#' odnosno komentar i ako jeste, skace se na deo programa
					; za citanje komentara
 0000032B  8B 15 001400C3 R		mov edx, buffPtr
 00000331  8A 02			mov al, [edx]
 00000333  3C 23			cmp al, '#'
 00000335  0F 84 00000440		je comment_read
					; provera da li je u pitanju citanje sirine i visine slike
 0000033B  83 3D 001400D3 R		cmp state, 1
	   01
 00000342  0F 84 000002DC		je read_width
					; provera da li je u pitanju citanje maksimalne vrednosti piksela
 00000348  83 3D 001400D3 R		cmp state, 2
	   02
 0000034F  0F 84 0000034E		je read_max_value
					; provera da li je vreme za pisanje sirine, visine slike i max vrednosti piksela u output fajl
 00000355  83 3D 001400D3 R		cmp state, 3
	   03
 0000035C  0F 84 00000388		je write_width
					; provera da li je u pitanju prelazak na obradu
 00000362  83 3D 001400D7 R		cmp typeS, 0
	   00
 00000369  74 05			je povecanje
 0000036B  E9 000001DB			jmp decimacija

					; ************************************************************
					; povecanje
					; ************************************************************
 00000370			povecanje:
					; priprema brojaca
 00000370  C7 05 0014011D R		mov counterX0, 0
	   00000000
 0000037A  C7 05 00140121 R		mov counterY0, 0
	   00000000
 00000384  C7 05 00140125 R		mov counterXr, 0
	   00000000
 0000038E  C7 05 00140129 R		mov counterYr, 0
	   00000000
 00000398  A1 001400C3 R		mov eax, buffPtr
 0000039D  A3 001400CB R		mov buffPtr3, eax
					; glavna petlja
 000003A2			loop1:
 000003A2  A1 001400E3 R		mov eax, pixHeight
 000003A7  39 05 00140121 R		cmp counterY0, eax
 000003AD  0F 84 000003F1		je close_files ; ako je counterY0 jednak visini slike, dosli smo do kraja obrade
 000003B3  A1 001400BF R		mov eax, factorS
 000003B8  39 05 00140129 R		cmp counterYr, eax
 000003BE  0F 84 000000DA		je reset_counterYr ; ako je counterYr jednak broju s, dosli smo do novog reda u ulaznom fajlu
 000003C4			return1:
 000003C4  A1 001400DB R		mov eax, pixWidth
 000003C9  39 05 0014011D R		cmp counterX0, eax
 000003CF  0F 84 000000F7		je reset_counterX0 ; ako je counterX0 jednak sirini slike, dosli smo do kraja reda
 000003D5			return2:
 000003D5  A1 001400BF R		mov eax, factorS
 000003DA  39 05 00140125 R		cmp counterXr, eax
 000003E0  0F 84 0000010C		je reset_counterXr ; ako je counterXr jednak broju s, dosli smo do novog piksela u jednom redu u ulaznom fajlu
 000003E6			return3:
					; ako su counterXr i counterYr jednaki 0, onda ne moramo da racunamo intenzitet, vec samo da prepisemo broj
 000003E6  83 3D 00140125 R		cmp counterXr, 0
	   00
 000003ED  0F 84 00000125		je print_number_condition1
					; ako smo na pocetku reda, menjamo vrednosti buffPtr i buffPtr3
 000003F3			return5:
 000003F3  80 3D 0014012E R		cmp flag2, 1
	   01
 000003FA  74 77			je change_buff

 000003FC			return4:
					; pronalazenje najblizih piksela
 000003FC  E8 FFFFFD88			call getI
 00000401  8B 1D 001400C3 R		mov ebx, buffPtr
 00000407  E8 FFFFFE56			call readNumber
 0000040C  E8 00000000 E		call ParseDecimal32
 00000411  A3 001400FD R		mov I1, eax
 00000416  89 1D 001400CF R		mov buffHelp, ebx
 0000041C  E8 FFFFFE41			call readNumber
 00000421  E8 00000000 E		call ParseDecimal32
 00000426  A3 00140105 R		mov I3, eax
 0000042B  8B 1D 001400C7 R		mov ebx, buffPtr2
 00000431  E8 FFFFFE2C			call readNumber
 00000436  E8 00000000 E		call ParseDecimal32
 0000043B  A3 00140101 R		mov I2, eax
 00000440  E8 FFFFFE1D			call readNumber
 00000445  E8 00000000 E		call ParseDecimal32
 0000044A  A3 00140109 R		mov I4, eax
 0000044F  E8 FFFFFC7A			call calculateG
 00000454  A1 00140119 R		mov eax, Gxy
 00000459  E8 FFFFFD80			call printNumber
 0000045E  E8 FFFFFDC3			call printSpaceString
 00000463  A1 001400CF R		mov eax, buffHelp
 00000468  FF 05 00140125 R		inc counterXr
 0000046E  E9 FFFFFF2F			jmp loop1
					
 00000473			change_buff:
 00000473  C6 05 0014012E R		mov flag2, 0
	   00
 0000047A  83 3D 00140129 R		cmp counterYr, 0
	   00
 00000481  74 0F			je change_buff3
 00000483  A1 001400CB R		mov eax, buffPtr3
 00000488  A3 001400C3 R		mov buffPtr, eax
 0000048D			label3:
 0000048D  E9 FFFFFF6A			jmp return4

 00000492			change_buff3:
 00000492  A1 001400C3 R		mov eax, buffPtr
 00000497  A3 001400CB R		mov buffPtr3, eax
 0000049C  EB EF			jmp label3

 0000049E			reset_counterYr:
 0000049E  E8 FFFFFDA1			call printNewLine
 000004A3  FF 05 00140121 R		inc counterY0
 000004A9  C7 05 00140129 R		mov counterYr, 0
	   00000000
 000004B3  C7 05 0014011D R		mov counterX0, 0
	   00000000
 000004BD  C7 05 00140125 R		mov counterXr, 0
	   00000000
 000004C7  E9 FFFFFED6			jmp loop1

 000004CC			reset_counterX0:
 000004CC  FF 05 00140129 R		inc counterYr
 000004D2  C7 05 0014011D R		mov counterX0, 0
	   00000000
 000004DC  C7 05 00140125 R		mov counterXr, 0
	   00000000
 000004E6  C6 05 0014012E R		mov flag2, 1
	   01
 000004ED  E9 FFFFFEB0			jmp loop1

 000004F2			reset_counterXr:
 000004F2  FF 05 0014011D R		inc counterX0
 000004F8  C7 05 00140125 R		mov counterXr, 0
	   00000000
 00000502  8B 1D 001400C3 R		mov ebx, buffPtr
 00000508  E8 FFFFFD55			call readNumber
 0000050D  89 1D 001400C3 R		mov buffPtr, ebx
 00000513  E9 FFFFFE8A			jmp loop1

 00000518			print_number_condition1:
 00000518  83 3D 00140129 R		cmp counterYr, 0
	   00
 0000051F  74 05			je print_number
 00000521  E9 FFFFFECD			jmp return5

					; citanje broja i prepisivanje istog u izlazni fajl, jer nije
					; potrebno racunanje intenziteta
 00000526			print_number:
 00000526  8B 1D 001400C3 R		mov ebx, buffPtr
 0000052C  E8 FFFFFD31			call readNumber
 00000531  A1 001400BB R		mov eax, fileHandle2
 00000536  E8 00000000 E		call WriteToFile
 0000053B  E8 FFFFFCE6			call printSpaceString
 00000540  FF 05 00140125 R		inc counterXr
 00000546  E9 FFFFFE57			jmp loop1

					; ************************************************************
					; decimacija
					; ************************************************************
 0000054B			decimacija:
					; priprema brojaca
 0000054B  66| C7 05			mov counterSW, 0
	   001400F5 R
	   0000
 00000554  66| C7 05			mov counterSH, 0
	   001400F7 R
	   0000
 0000055D  A1 001400E3 R		mov eax, pixHeight
 00000562  66| A3			mov counterHeight, ax
	   001400F3 R
 00000568  A1 001400DB R		mov eax, pixWidth
 0000056D  66| A3			mov counterWidth, ax
	   001400F1 R
 00000573			read_loop:
					; citanje broja i provera da li broj treba da se ispise
 00000573  8B 1D 001400C3 R		mov ebx, buffPtr
 00000579  E8 FFFFFCE4			call readNumber
 0000057E  89 1D 001400C3 R		mov buffPtr, ebx
 00000584  66| 83 3D			cmp counterSW, 0
	   001400F5 R 00
 0000058C  74 24			je condition1
 0000058E			continue1:
					; smanjuje se brojac
 0000058E  66| FF 0D			dec counterSW
	   001400F5 R
 00000595			continue2:
					; smanje se brojac counterWidth i proverava se da li je doslo do kraja reda
 00000595  66| FF 0D			dec counterWidth
	   001400F1 R
 0000059C  66| 83 3D			cmp counterWidth, 0
	   001400F1 R 00
 000005A4  74 41			je new_line
 000005A6			continue3:
					; provera da li je doslo do kraja datoteke
 000005A6  66| 83 3D			cmp counterHeight, 0
	   001400F3 R 00
 000005AE  74 6F			je end_reading
 000005B0  EB C1			jmp read_loop

 000005B2			condition1:
 000005B2  A1 001400BF R		mov eax, factorS
 000005B7  66| A3			mov counterSW, ax
	   001400F5 R
 000005BD  66| 83 3D			cmp counterSH, 0
	   001400F7 R 00
 000005C5  74 02			je write_number
 000005C7  EB C5			jmp continue1

 000005C9			write_number:
 000005C9  A1 001400BB R		mov eax, fileHandle2
 000005CE  E8 00000000 E		call WriteToFile
 000005D3  E8 FFFFFC4E			call printSpaceString
 000005D8  8B 0D 001400BF R		mov ecx, factorS
 000005DE  66| 89 0D			mov counterSW, cx
	   001400F5 R
 000005E5  EB A7			jmp continue1

 000005E7			new_line:
 000005E7  66| 83 3D			cmp counterSH, 0
	   001400F7 R 00
 000005EF  74 1B			je set_counterSH
 000005F1			continue4:
 000005F1  66| FF 0D			dec counterSH
	   001400F7 R
 000005F8  66| FF 0D			dec counterHeight
	   001400F3 R
 000005FF  A1 001400DB R		mov eax, pixWidth
 00000604  66| A3			mov counterWidth, ax
	   001400F1 R
 0000060A  EB 9A			jmp continue3

 0000060C			set_counterSH:
 0000060C  A1 001400BF R		mov eax, factorS
 00000611  66| A3			mov counterSH, ax
	   001400F7 R
 00000617  66| A3			mov counterSW, ax
	   001400F5 R
 0000061D  EB D2			jmp continue4

 0000061F			end_reading:
 0000061F  E9 00000180			jmp close_files

					; citanje sirine i visine slike
 00000624			read_width:
 00000624  B9 00000000			mov ecx, 0 ; brojac koliko karaktera ima ucitana sirina
					; loop za citanje sirine
 00000629			width_loop:
 00000629  8B 15 001400C3 R		mov edx, buffPtr
 0000062F  8A 02			mov al, [edx]
 00000631  E8 00000000 E		call IsDigit
 00000636  75 0F			jnz end_width_loop
 00000638  88 81 0014000A R		mov bufferNumber[ecx], al
 0000063E  41				inc ecx
 0000063F  FF 05 001400C3 R		inc buffPtr
 00000645  EB E2			jmp width_loop
					; procitana je sirina, ali u vidu niza karaktera pa je potrebno konvertovati je u integer
 00000647			end_width_loop:
 00000647  BA 0014000A R		mov edx, OFFSET bufferNumber
 0000064C  E8 00000000 E		call ParseDecimal32
 00000651  A3 001400DB R		mov pixWidth, eax
 00000656  B9 00000000			mov ecx, 0
					; citanje praznog karaktera izmedju vrednosti za visinu i sirinu
 0000065B  FF 05 001400C3 R		inc buffPtr
 00000661			height_loop:
 00000661  8B 15 001400C3 R		mov edx, buffPtr
 00000667  8A 02			mov al, [edx]
 00000669  E8 00000000 E		call IsDigit
 0000066E  75 0F			jnz end_height_loop
 00000670  88 81 0014000A R		mov bufferNumber[ecx], al
 00000676  41				inc ecx
 00000677  FF 05 001400C3 R		inc buffPtr
 0000067D  EB E2			jmp height_loop
					; procitana je visina, ali u vidu niza karaktera pa je potrebno konvertovati je u integer
 0000067F			end_height_loop:
 0000067F  BA 0014000A R		mov edx, OFFSET bufferNumber
 00000684  E8 00000000 E		call ParseDecimal32
 00000689  A3 001400E3 R		mov pixHeight, eax
					; citanje karaktera za nov red
 0000068E  FF 05 001400C3 R		inc buffPtr
 00000694  C7 05 001400D3 R		mov state, 2
	   00000002
 0000069E  E9 FFFFFC88			jmp check_state
					
					; citanje maksimalne vrednosti piksela
 000006A3			read_max_value:
 000006A3  B9 00000000			mov ecx, 0
					; loop za citanje maksimalne vrednosti piksela
 000006A8			max_value_loop:
 000006A8  8B 15 001400C3 R		mov edx, buffPtr
 000006AE  8A 02			mov al, [edx]
 000006B0  E8 00000000 E		call IsDigit
 000006B5  75 0F			jnz end_max_value_loop
 000006B7  88 81 0014000A R		mov bufferNumber[ecx], al
 000006BD  41				inc ecx
 000006BE  FF 05 001400C3 R		inc buffPtr
 000006C4  EB E2			jmp max_value_loop
					; procitana je max vrednost ali u vidu niza karaktera pa je potrebno konvertovati je u integer
 000006C6			end_max_value_loop:
 000006C6  BA 0014000A R		mov edx, OFFSET bufferNumber
 000006CB  E8 00000000 E		call ParseDecimal32
 000006D0  A3 001400EB R		mov pixMaxValue, eax
					; citanje karaktera za novi red
 000006D5  FF 05 001400C3 R		inc buffPtr
 000006DB  C7 05 001400D3 R		mov state, 3
	   00000003
 000006E5  E9 FFFFFC41			jmp check_state

					; upis sirine i visine slike, kao i max vrednosti piksela u output fajl
 000006EA			write_width:
					; racunanje novih visina i sirina
 000006EA  83 3D 001400D7 R		cmp typeS, 0
	   00
 000006F1  74 2C			je calculate
 000006F3  BA 00000000			mov edx, 0
 000006F8  A1 001400DB R		mov eax, pixWidth
 000006FD  F7 35 001400BF R		div factorS
 00000703  A3 001400DF R		mov newPixWidth, eax
 00000708  BA 00000000			mov edx, 0
 0000070D  A1 001400E3 R		mov eax, pixHeight
 00000712  F7 35 001400BF R		div factorS
 00000718  A3 001400E7 R		mov newPixHeight, eax
 0000071D  EB 20			jmp write_width1
 0000071F			calculate:
 0000071F  A1 001400DB R		mov eax, pixWidth
 00000724  F7 25 001400BF R		mul factorS
 0000072A  A3 001400DF R		mov newPixWidth, eax
 0000072F  A1 001400E3 R		mov eax, pixHeight
 00000734  F7 25 001400BF R		mul factorS
 0000073A  A3 001400E7 R		mov newPixHeight, eax
 0000073F			write_width1:
					; ispis sirine u izlazni fajl
 0000073F  A1 001400DF R		mov eax, newPixWidth
 00000744  E8 FFFFFA95			call printNumber
 00000749  E8 FFFFFAD8			call printSpaceString
					; ispis duzine u izlazni fajl
 0000074E  A1 001400E7 R		mov eax, newPixHeight
 00000753  E8 FFFFFA86			call printNumber
 00000758  E8 FFFFFAE7			call printNewLine
					; ispis maksimalne vrednosti piksela
 0000075D  A1 001400EB R		mov eax, pixMaxValue
 00000762  E8 FFFFFA77			call printNumber
 00000767  E8 FFFFFAD8			call printNewLine
 0000076C  C7 05 001400D3 R		mov state, 4
	   00000004
 00000776  E9 FFFFFBB0			jmp check_state

					; loop za citanje komentara iz ulaznog fajla
 0000077B			comment_read:
 0000077B  FF 05 001400C3 R		inc buffPtr
 00000781  8B 15 001400C3 R		mov edx, buffPtr
 00000787  8A 02			mov al, [edx]
 00000789  3C 0A			cmp al, 0ah
 0000078B  75 EE			jne comment_read
 0000078D  FF 05 001400C3 R		inc buffPtr
 00000793  E9 FFFFFB93			jmp check_state

					; greska pri citanju / upisu u fajl
 00000798			error:
					mWrite <"Greska pri citanju/upisu u fajl", 0dh, 0ah>
 0014028A		     1		.data		
 0014028A 47 72 65 73 6B     1		??0009 BYTE "Greska pri citanju/upisu u fajl", 0dh, 0ah,0	
	   61 20 70 72 69
	   20 63 69 74 61
	   6E 6A 75 2F 75
	   70 69 73 75 20
	   75 20 66 61 6A
	   6C 0D 0A 00
 00000798		     1		.code
 00000798  52		     1		push	edx
 00000799  BA 0014028A R     1		mov	edx,OFFSET ??0009
 0000079E  E8 00000000 E     1		call	WriteString
 000007A3  5A		     1		pop	edx

					; zatvaranje datoteka
 000007A4			close_files:
 000007A4  A1 001400B7 R		mov eax, fileHandle1
 000007A9  E8 00000000 E		call CloseFile
 000007AE  A1 001400BB R		mov eax, fileHandle2
 000007B3  E8 00000000 E		call CloseFile

					; izlazak iz programa
 000007B8			jmp_to_exit:
					exit
 000007B8  6A 00	   *	    push   +000000000h
 000007BA  E8 00000000 E   *	    call   ExitProcess
 000007BF			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/29/18 16:14:47
Projekat.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 001402AC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007BF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateG . . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 000000BB Public STDCALL
getI . . . . . . . . . . . . . .	P Near	 00000189 _TEXT	Length= 00000055 Public STDCALL
  getI_loop  . . . . . . . . . .	L Near	 0000019C _TEXT	
  getI_loop1 . . . . . . . . . .	L Near	 000001A6 _TEXT	
  getI_end1  . . . . . . . . . .	L Near	 000001BD _TEXT	
  getI_skip_end  . . . . . . . .	L Near	 000001CF _TEXT	
  getI_skip  . . . . . . . . . .	L Near	 000001D2 _TEXT	
  getI_end . . . . . . . . . . .	L Near	 000001DA _TEXT	
main . . . . . . . . . . . . . .	P Near	 000002C4 _TEXT	Length= 000004FB Public STDCALL
  read_ok  . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  check_state  . . . . . . . . .	L Near	 0000032B _TEXT	
  povecanje  . . . . . . . . . .	L Near	 00000370 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 000003A2 _TEXT	
  return1  . . . . . . . . . . .	L Near	 000003C4 _TEXT	
  return2  . . . . . . . . . . .	L Near	 000003D5 _TEXT	
  return3  . . . . . . . . . . .	L Near	 000003E6 _TEXT	
  return5  . . . . . . . . . . .	L Near	 000003F3 _TEXT	
  return4  . . . . . . . . . . .	L Near	 000003FC _TEXT	
  change_buff  . . . . . . . . .	L Near	 00000473 _TEXT	
  label3 . . . . . . . . . . . .	L Near	 0000048D _TEXT	
  change_buff3 . . . . . . . . .	L Near	 00000492 _TEXT	
  reset_counterYr  . . . . . . .	L Near	 0000049E _TEXT	
  reset_counterX0  . . . . . . .	L Near	 000004CC _TEXT	
  reset_counterXr  . . . . . . .	L Near	 000004F2 _TEXT	
  print_number_condition1  . . .	L Near	 00000518 _TEXT	
  print_number . . . . . . . . .	L Near	 00000526 _TEXT	
  decimacija . . . . . . . . . .	L Near	 0000054B _TEXT	
  read_loop  . . . . . . . . . .	L Near	 00000573 _TEXT	
  continue1  . . . . . . . . . .	L Near	 0000058E _TEXT	
  continue2  . . . . . . . . . .	L Near	 00000595 _TEXT	
  continue3  . . . . . . . . . .	L Near	 000005A6 _TEXT	
  condition1 . . . . . . . . . .	L Near	 000005B2 _TEXT	
  write_number . . . . . . . . .	L Near	 000005C9 _TEXT	
  new_line . . . . . . . . . . .	L Near	 000005E7 _TEXT	
  continue4  . . . . . . . . . .	L Near	 000005F1 _TEXT	
  set_counterSH  . . . . . . . .	L Near	 0000060C _TEXT	
  end_reading  . . . . . . . . .	L Near	 0000061F _TEXT	
  read_width . . . . . . . . . .	L Near	 00000624 _TEXT	
  width_loop . . . . . . . . . .	L Near	 00000629 _TEXT	
  end_width_loop . . . . . . . .	L Near	 00000647 _TEXT	
  height_loop  . . . . . . . . .	L Near	 00000661 _TEXT	
  end_height_loop  . . . . . . .	L Near	 0000067F _TEXT	
  read_max_value . . . . . . . .	L Near	 000006A3 _TEXT	
  max_value_loop . . . . . . . .	L Near	 000006A8 _TEXT	
  end_max_value_loop . . . . . .	L Near	 000006C6 _TEXT	
  write_width  . . . . . . . . .	L Near	 000006EA _TEXT	
  calculate  . . . . . . . . . .	L Near	 0000071F _TEXT	
  write_width1 . . . . . . . . .	L Near	 0000073F _TEXT	
  comment_read . . . . . . . . .	L Near	 0000077B _TEXT	
  error  . . . . . . . . . . . .	L Near	 00000798 _TEXT	
  close_files  . . . . . . . . .	L Near	 000007A4 _TEXT	
  jmp_to_exit  . . . . . . . . .	L Near	 000007B8 _TEXT	
printNewLine . . . . . . . . . .	P Near	 00000244 _TEXT	Length= 0000001E Public STDCALL
printNumber  . . . . . . . . . .	P Near	 000001DE _TEXT	Length= 00000048 Public STDCALL
  int_to_string  . . . . . . . .	L Near	 000001EB _TEXT	
printSpaceString . . . . . . . .	P Near	 00000226 _TEXT	Length= 0000001E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readNumber . . . . . . . . . . .	P Near	 00000262 _TEXT	Length= 00000062 Public STDCALL
  read_number_loop . . . . . . .	L Near	 00000268 _TEXT	
  end_read_number_loop . . . . .	L Near	 0000027D _TEXT	
  end_smaller  . . . . . . . . .	L Near	 0000028C _TEXT	
  smaller100 . . . . . . . . . .	L Near	 00000295 _TEXT	
  smaller10  . . . . . . . . . .	L Near	 000002B0 _TEXT	
  skip_new_line  . . . . . . . .	L Near	 000002C1 _TEXT	
  end_read_number  . . . . . . .	L Near	 000002C2 _TEXT	
readSTD  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CE Public STDCALL
  input_ok . . . . . . . . . . .	L Near	 00000058 _TEXT	
  output_ok  . . . . . . . . . .	L Near	 0000007A _TEXT	
  read_factor1 . . . . . . . . .	L Near	 00000086 _TEXT	
  good_factor1 . . . . . . . . .	L Near	 0000009B _TEXT	
  read_factor2 . . . . . . . . .	L Near	 000000AC _TEXT	
  good_factor2 . . . . . . . . .	L Near	 000000C1 _TEXT	
  jmp_to_exit1 . . . . . . . . .	L Near	 000000C7 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0014012F _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0014014E _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0014016D _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00140186 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 001401A6 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 001401C5 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 001401E7 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0014024D _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0014026F _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0014028A _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00140000h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
F1 . . . . . . . . . . . . . . .	DWord	 0014010D _DATA	
F2 . . . . . . . . . . . . . . .	DWord	 00140111 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Gxy  . . . . . . . . . . . . . .	DWord	 00140119 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
I1 . . . . . . . . . . . . . . .	DWord	 001400FD _DATA	
I2 . . . . . . . . . . . . . . .	DWord	 00140101 _DATA	
I3 . . . . . . . . . . . . . . .	DWord	 00140105 _DATA	
I4 . . . . . . . . . . . . . . .	DWord	 00140109 _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffHelp . . . . . . . . . . . .	DWord	 001400CF _DATA	
buffPtr2 . . . . . . . . . . . .	DWord	 001400C7 _DATA	
buffPtr3 . . . . . . . . . . . .	DWord	 001400CB _DATA	
buffPtr  . . . . . . . . . . . .	DWord	 001400C3 _DATA	
bufferIn . . . . . . . . . . . .	Byte	 00000000 _DATA	
bufferNum1 . . . . . . . . . . .	Byte	 00140015 _DATA	
bufferNum2 . . . . . . . . . . .	Byte	 00140012 _DATA	
bufferNum3 . . . . . . . . . . .	Byte	 0014000E _DATA	
bufferNumber . . . . . . . . . .	Byte	 0014000A _DATA	
bufferOut  . . . . . . . . . . .	Byte	 00140000 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 001400F9 _DATA	
counterHeight  . . . . . . . . .	Word	 001400F3 _DATA	
counterSH  . . . . . . . . . . .	Word	 001400F7 _DATA	
counterSW  . . . . . . . . . . .	Word	 001400F5 _DATA	
counterWidth . . . . . . . . . .	Word	 001400F1 _DATA	
counterX0  . . . . . . . . . . .	DWord	 0014011D _DATA	
counterXr  . . . . . . . . . . .	DWord	 00140125 _DATA	
counterY0  . . . . . . . . . . .	DWord	 00140121 _DATA	
counterYr  . . . . . . . . . . .	DWord	 00140129 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
factorS  . . . . . . . . . . . .	DWord	 001400BF _DATA	
fileHandle1  . . . . . . . . . .	DWord	 001400B7 _DATA	
fileHandle2  . . . . . . . . . .	DWord	 001400BB _DATA	
fileName1  . . . . . . . . . . .	Byte	 00140017 _DATA	
fileName2  . . . . . . . . . . .	Byte	 00140067 _DATA	
flag1  . . . . . . . . . . . . .	Byte	 0014012D _DATA	
flag2  . . . . . . . . . . . . .	Byte	 0014012E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
newPixHeight . . . . . . . . . .	DWord	 001400E7 _DATA	
newPixWidth  . . . . . . . . . .	DWord	 001400DF _DATA	
pixHeight  . . . . . . . . . . .	DWord	 001400E3 _DATA	
pixMaxValue  . . . . . . . . . .	DWord	 001400EB _DATA	
pixWidth . . . . . . . . . . . .	DWord	 001400DB _DATA	
pom1 . . . . . . . . . . . . . .	DWord	 00140115 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
state  . . . . . . . . . . . . .	DWord	 001400D3 _DATA	
string . . . . . . . . . . . . .	Word	 001400EF _DATA	
typeS  . . . . . . . . . . . . .	DWord	 001400D7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
